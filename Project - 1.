import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;

public class PhoneBookGUI {
    private JFrame frame;
    private JTextField nameField;
    private JTextField phoneField;
    private JTextField addressField;
    private JTextField emailField;
    private JTextArea displayArea;
    private HashMap<String, Contact> phoneBook;

    public PhoneBookGUI() {
        phoneBook = new HashMap<>();
        initialize();
    }

    private void initialize() {
        frame = new JFrame("PhoneBook");
        frame.setBounds(100, 100, 800, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(new BorderLayout(10, 10));

        JPanel panel = new JPanel();
        frame.getContentPane().add(panel, BorderLayout.NORTH);
        panel.setLayout(new GridLayout(4, 2, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JLabel nameLabel = new JLabel("Name:");
        nameLabel.setFont(new Font("Arial", Font.BOLD, 16));
        panel.add(nameLabel);

        nameField = new JTextField();
        nameField.setFont(new Font("Arial", Font.PLAIN, 16));
        panel.add(nameField);
        nameField.setColumns(10);

        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setFont(new Font("Arial", Font.BOLD, 16));
        panel.add(phoneLabel);

        phoneField = new JTextField();
        phoneField.setFont(new Font("Arial", Font.PLAIN, 16));
        panel.add(phoneField);
        phoneField.setColumns(10);

        JLabel addressLabel = new JLabel("Address:");
        addressLabel.setFont(new Font("Arial", Font.BOLD, 16));
        panel.add(addressLabel);

        addressField = new JTextField();
        addressField.setFont(new Font("Arial", Font.PLAIN, 16));
        panel.add(addressField);
        addressField.setColumns(10);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setFont(new Font("Arial", Font.BOLD, 16));
        panel.add(emailLabel);

        emailField = new JTextField();
        emailField.setFont(new Font("Arial", Font.PLAIN, 16));
        panel.add(emailField);
        emailField.setColumns(10);

        JPanel buttonPanel = new JPanel();
        frame.getContentPane().add(buttonPanel, BorderLayout.CENTER);
        buttonPanel.setLayout(new GridLayout(5, 1, 10, 10));
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JButton addButton = createButton("Add Contact");
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                addContact();
            }
        });
        buttonPanel.add(addButton);

        JButton searchButton = createButton("Search Contact");
        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                searchContact();
            }
        });
        buttonPanel.add(searchButton);

        JButton updateButton = createButton("Update Contact");
        updateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                updateContact();
            }
        });
        buttonPanel.add(updateButton);

        JButton deleteButton = createButton("Delete Contact");
        deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                deleteContact();
            }
        });
        buttonPanel.add(deleteButton);

        JButton displayButton = createButton("Display All Contacts");
        displayButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                displayContacts();
            }
        });
        buttonPanel.add(displayButton);

        displayArea = new JTextArea();
        displayArea.setFont(new Font("Arial", Font.PLAIN, 16));
        displayArea.setEditable(false);
        displayArea.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createTitledBorder("Contacts"),
                BorderFactory.createEmptyBorder(10, 10, 10, 10)));
        JScrollPane scrollPane = new JScrollPane(displayArea);
        scrollPane.setPreferredSize(new Dimension(750, 200));
        frame.getContentPane().add(scrollPane, BorderLayout.SOUTH);
    }

    private JButton createButton(String text) {
        JButton button = new JButton(text);
        button.setFont(new Font("Arial", Font.BOLD, 16));
        button.setPreferredSize(new Dimension(200, 50));
        button.setBackground(Color.LIGHT_GRAY);
        button.setForeground(Color.BLACK);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY, 2));
        return button;
    }

    private void addContact() {
        String name = nameField.getText();
        String phoneNumber = phoneField.getText();
        String address = addressField.getText();
        String email = emailField.getText();

        if (!name.isEmpty() && !phoneNumber.isEmpty() && !address.isEmpty() && !email.isEmpty()) {
            Contact contact = new Contact(name, phoneNumber, address, email);
            phoneBook.put(name, contact);
            displayArea.setText("Contact added: " + contact);
            clearFields();
        } else {
            displayArea.setText("Please enter name, phone number, address, and email.");
        }
    }

    private void searchContact() {
        String name = nameField.getText();
        if (phoneBook.containsKey(name)) {
            Contact contact = phoneBook.get(name);
            displayArea.setText("Contact found: " + contact);
        } else {
            displayArea.setText("Contact not found: " + name);
        }
    }

    private void updateContact() {
        String name = nameField.getText();
        String newPhoneNumber = phoneField.getText();
        String newAddress = addressField.getText();
        String newEmail = emailField.getText();

        if (phoneBook.containsKey(name)) {
            Contact contact = phoneBook.get(name);
            contact.setPhoneNumber(newPhoneNumber);
            contact.setAddress(newAddress);
            contact.setEmail(newEmail);
            displayArea.setText("Contact updated: " + contact);
            clearFields();
        } else {
            displayArea.setText("Contact not found: " + name);
        }
    }

    private void deleteContact() {
        String name = nameField.getText();
        if (phoneBook.containsKey(name)) {
            phoneBook.remove(name);
            displayArea.setText("Contact deleted: " + name);
            clearFields();
        } else {
            displayArea.setText("Contact not found: " + name);
        }
    }

    private void displayContacts() {
        if (phoneBook.isEmpty()) {
            displayArea.setText("No contacts in the phonebook.");
        } else {
            StringBuilder contacts = new StringBuilder();
            for (Contact contact : phoneBook.values()) {
                contacts.append(contact).append("\n");
            }
            displayArea.setText(contacts.toString());
        }
    }

    private void clearFields() {
        nameField.setText("");
        phoneField.setText("");
        addressField.setText("");
        emailField.setText("");
    }

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    PhoneBookGUI window = new PhoneBookGUI();
                    window.frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }
}

class Contact {
    private String name;
    private String phoneNumber;
    private String address;
    private String email;

    public Contact(String name, String phoneNumber, String address, String email) {
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public String getAddress() {
        return address;
    }

    public String getEmail() {
        return email;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Phone Number: " + phoneNumber + ", Address: " + address + ", Email: " + email;
    }
}
